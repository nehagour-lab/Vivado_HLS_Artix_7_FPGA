// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35tcpg236-3,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.023500,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=234,HLS_SYN_LUT=282}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [3:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
output  [3:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [3:0] b_address1;
output   b_ce1;
input  [7:0] b_q1;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] a_address0;
reg a_ce0;
reg a_ce1;
reg[3:0] b_address0;
reg b_ce0;
reg b_ce1;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] indvar_flatten_reg_132;
reg   [1:0] i_reg_143;
reg   [1:0] j_reg_154;
reg  signed [7:0] reg_165;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_flag00011001;
reg   [0:0] exitcond_flatten_reg_356;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_flag00011001;
reg  signed [7:0] reg_169;
wire   [0:0] exitcond_flatten_fu_173_p2;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_356;
wire   [3:0] indvar_flatten_next_fu_179_p2;
reg   [3:0] indvar_flatten_next_reg_360;
wire   [1:0] j_mid2_fu_197_p3;
reg   [1:0] j_mid2_reg_365;
wire   [1:0] tmp_mid2_v_fu_205_p3;
reg   [1:0] tmp_mid2_v_reg_372;
wire   [4:0] tmp_1_fu_229_p2;
reg   [4:0] tmp_1_reg_377;
wire   [4:0] tmp_10_fu_298_p2;
reg   [4:0] tmp_10_reg_413;
reg   [7:0] a_load_2_reg_418;
reg   [7:0] b_load_2_reg_423;
wire   [1:0] j_1_fu_303_p2;
reg   [1:0] j_1_reg_428;
wire  signed [15:0] grp_fu_340_p3;
reg  signed [15:0] tmp1_reg_433;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_flag00011011;
reg   [3:0] indvar_flatten_phi_fu_136_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [1:0] i_phi_fu_147_p4;
reg   [1:0] j_phi_fu_158_p4;
wire  signed [63:0] tmp_1_cast_fu_235_p1;
wire  signed [63:0] tmp_8_cast_fu_246_p1;
wire   [63:0] tmp_2_fu_251_p1;
wire   [63:0] tmp_10_cast_fu_266_p1;
wire  signed [63:0] tmp_4_cast_fu_276_p1;
wire    ap_block_pp0_stage1_flag00000000;
wire   [63:0] tmp_9_cast_fu_293_p1;
wire  signed [63:0] tmp_11_cast_fu_328_p1;
wire  signed [15:0] grp_fu_348_p3;
wire   [0:0] exitcond_fu_191_p2;
wire   [1:0] i_1_fu_185_p2;
wire   [3:0] tmp_fu_217_p3;
wire   [4:0] p_shl_cast_fu_225_p1;
wire   [4:0] tmp_mid2_cast_fu_213_p1;
wire   [4:0] tmp_8_fu_240_p2;
wire   [3:0] tmp_2_cast3_fu_256_p1;
wire   [3:0] tmp_s_fu_260_p2;
wire   [4:0] tmp_4_fu_271_p2;
wire   [2:0] tmp_2_cast_fu_284_p1;
wire   [2:0] tmp_9_fu_287_p2;
wire   [4:0] tmp_2_cast4_fu_281_p1;
wire  signed [7:0] tmp_7_2_fu_322_p0;
wire  signed [7:0] tmp_7_2_fu_322_p1;
wire   [15:0] grp_fu_340_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

matrixmul_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulbkb_U1(
    .din0(reg_169),
    .din1(reg_165),
    .din2(grp_fu_340_p2),
    .dout(grp_fu_340_p3)
);

matrixmul_mac_mulcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_mulcud_U2(
    .din0(reg_169),
    .din1(reg_165),
    .din2(tmp1_reg_433),
    .dout(grp_fu_348_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_356 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_reg_143 <= tmp_mid2_v_reg_372;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_143 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_356 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_flatten_reg_132 <= indvar_flatten_next_reg_360;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_132 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_356 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        j_reg_154 <= j_1_reg_428;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_154 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond_flatten_reg_356 == 1'd0))) begin
        a_load_2_reg_418 <= a_q1;
        b_load_2_reg_423 <= b_q1;
        j_1_reg_428 <= j_1_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_356 <= exitcond_flatten_reg_356;
        exitcond_flatten_reg_356 <= exitcond_flatten_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        indvar_flatten_next_reg_360 <= indvar_flatten_next_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_173_p2))) begin
        j_mid2_reg_365 <= j_mid2_fu_197_p3;
        tmp_1_reg_377 <= tmp_1_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond_flatten_reg_356 == 1'd0)) | ((exitcond_flatten_reg_356 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        reg_165 <= a_q0;
        reg_169 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_356 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp1_reg_433 <= grp_fu_340_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond_flatten_reg_356 == 1'd0))) begin
        tmp_10_reg_413 <= tmp_10_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_173_p2))) begin
        tmp_mid2_v_reg_372 <= tmp_mid2_v_fu_205_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            a_address0 = tmp_4_cast_fu_276_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            a_address0 = tmp_1_cast_fu_235_p1;
        end else begin
            a_address0 = 'bx;
        end
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_173_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            b_address0 = tmp_9_cast_fu_293_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            b_address0 = tmp_2_fu_251_p1;
        end else begin
            b_address0 = 'bx;
        end
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_356 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_phi_fu_147_p4 = tmp_mid2_v_reg_372;
    end else begin
        i_phi_fu_147_p4 = i_reg_143;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_356 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten_phi_fu_136_p4 = indvar_flatten_next_reg_360;
    end else begin
        indvar_flatten_phi_fu_136_p4 = indvar_flatten_reg_132;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_356 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        j_phi_fu_158_p4 = j_1_reg_428;
    end else begin
        j_phi_fu_158_p4 = j_reg_154;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_356))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_173_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_173_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_block_pp0_stage1_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address1 = tmp_8_cast_fu_246_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_address1 = tmp_10_cast_fu_266_p1;

assign exitcond_flatten_fu_173_p2 = ((indvar_flatten_phi_fu_136_p4 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_191_p2 = ((j_phi_fu_158_p4 == 2'd3) ? 1'b1 : 1'b0);

assign grp_fu_340_p2 = ($signed(tmp_7_2_fu_322_p0) * $signed(tmp_7_2_fu_322_p1));

assign i_1_fu_185_p2 = (i_phi_fu_147_p4 + 2'd1);

assign indvar_flatten_next_fu_179_p2 = (indvar_flatten_phi_fu_136_p4 + 4'd1);

assign j_1_fu_303_p2 = (j_mid2_reg_365 + 2'd1);

assign j_mid2_fu_197_p3 = ((exitcond_fu_191_p2[0:0] === 1'b1) ? 2'd0 : j_phi_fu_158_p4);

assign p_shl_cast_fu_225_p1 = tmp_fu_217_p3;

assign res_address0 = tmp_11_cast_fu_328_p1;

assign res_d0 = grp_fu_348_p3;

assign tmp_10_cast_fu_266_p1 = tmp_s_fu_260_p2;

assign tmp_10_fu_298_p2 = (tmp_1_reg_377 + tmp_2_cast4_fu_281_p1);

assign tmp_11_cast_fu_328_p1 = $signed(tmp_10_reg_413);

assign tmp_1_cast_fu_235_p1 = $signed(tmp_1_fu_229_p2);

assign tmp_1_fu_229_p2 = (p_shl_cast_fu_225_p1 - tmp_mid2_cast_fu_213_p1);

assign tmp_2_cast3_fu_256_p1 = j_mid2_fu_197_p3;

assign tmp_2_cast4_fu_281_p1 = j_mid2_reg_365;

assign tmp_2_cast_fu_284_p1 = j_mid2_reg_365;

assign tmp_2_fu_251_p1 = j_mid2_fu_197_p3;

assign tmp_4_cast_fu_276_p1 = $signed(tmp_4_fu_271_p2);

assign tmp_4_fu_271_p2 = (tmp_1_reg_377 + 5'd1);

assign tmp_7_2_fu_322_p0 = b_load_2_reg_423;

assign tmp_7_2_fu_322_p1 = a_load_2_reg_418;

assign tmp_8_cast_fu_246_p1 = $signed(tmp_8_fu_240_p2);

assign tmp_8_fu_240_p2 = (tmp_1_fu_229_p2 + 5'd2);

assign tmp_9_cast_fu_293_p1 = tmp_9_fu_287_p2;

assign tmp_9_fu_287_p2 = (tmp_2_cast_fu_284_p1 + 3'd3);

assign tmp_fu_217_p3 = {{tmp_mid2_v_fu_205_p3}, {2'd0}};

assign tmp_mid2_cast_fu_213_p1 = tmp_mid2_v_fu_205_p3;

assign tmp_mid2_v_fu_205_p3 = ((exitcond_fu_191_p2[0:0] === 1'b1) ? i_1_fu_185_p2 : i_phi_fu_147_p4);

assign tmp_s_fu_260_p2 = (tmp_2_cast3_fu_256_p1 + 4'd6);

endmodule //matrixmul
