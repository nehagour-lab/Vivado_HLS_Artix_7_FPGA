#include "header.h"

 inta simple (inta a[8], inta b[8], inta c[8])

{
#pragma HLS array_partition variable=a block factor=4
#pragma HLS array_partition variable=b block factor=4
#pragma HLS array_partition variable=c block factor=4

inta i;
 simple_label1:for(i=0;i<8; i++)   // unroll
    {
      c[i]= a[i]+b[i];

     }
    return 0;
	}



#ifndef _HEADER_H_
#define _HEADER_H_

#include <ap_cint.h>

typedef int8 inta;

inta simple(inta a[8],inta b[8],inta c[8]);



#endif



# include <stdio.h>
# include "header.h"

inta main()
{
inta j;
inta main_a[8]={1,2,3,4,5,6,7,8};
inta main_b[8]={1,2,3,4,5,6,7,8};
inta main_c[8];

simple(main_a,main_b,main_c);
for(j=0; j<8; j++)
{
printf("%d\n", main_c[j]);
}

} 



-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simple is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_0_ce0 : OUT STD_LOGIC;
    a_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_0_ce1 : OUT STD_LOGIC;
    a_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_1_ce0 : OUT STD_LOGIC;
    a_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_1_ce1 : OUT STD_LOGIC;
    a_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_2_ce0 : OUT STD_LOGIC;
    a_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_2_ce1 : OUT STD_LOGIC;
    a_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_3_ce0 : OUT STD_LOGIC;
    a_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_3_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_3_ce1 : OUT STD_LOGIC;
    a_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_0_ce0 : OUT STD_LOGIC;
    b_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_0_ce1 : OUT STD_LOGIC;
    b_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_1_ce1 : OUT STD_LOGIC;
    b_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_2_ce0 : OUT STD_LOGIC;
    b_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_2_ce1 : OUT STD_LOGIC;
    b_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_3_ce0 : OUT STD_LOGIC;
    b_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_3_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_3_ce1 : OUT STD_LOGIC;
    b_3_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    c_0_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    c_0_ce0 : OUT STD_LOGIC;
    c_0_we0 : OUT STD_LOGIC;
    c_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_0_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    c_0_ce1 : OUT STD_LOGIC;
    c_0_we1 : OUT STD_LOGIC;
    c_0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    c_1_ce0 : OUT STD_LOGIC;
    c_1_we0 : OUT STD_LOGIC;
    c_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_1_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    c_1_ce1 : OUT STD_LOGIC;
    c_1_we1 : OUT STD_LOGIC;
    c_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    c_2_ce0 : OUT STD_LOGIC;
    c_2_we0 : OUT STD_LOGIC;
    c_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_2_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    c_2_ce1 : OUT STD_LOGIC;
    c_2_we1 : OUT STD_LOGIC;
    c_2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    c_3_ce0 : OUT STD_LOGIC;
    c_3_we0 : OUT STD_LOGIC;
    c_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_3_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    c_3_ce1 : OUT STD_LOGIC;
    c_3_we1 : OUT STD_LOGIC;
    c_3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of simple is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "simple,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z030ifbg484-2l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.393333,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=234,HLS_SYN_LUT=117}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    a_0_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    a_0_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    a_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            a_0_ce0 <= ap_const_logic_1;
        else 
            a_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_0_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            a_0_ce1 <= ap_const_logic_1;
        else 
            a_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_1_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    a_1_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    a_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            a_1_ce0 <= ap_const_logic_1;
        else 
            a_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_1_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            a_1_ce1 <= ap_const_logic_1;
        else 
            a_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_2_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    a_2_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    a_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            a_2_ce0 <= ap_const_logic_1;
        else 
            a_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_2_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            a_2_ce1 <= ap_const_logic_1;
        else 
            a_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_3_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    a_3_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    a_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            a_3_ce0 <= ap_const_logic_1;
        else 
            a_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_3_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            a_3_ce1 <= ap_const_logic_1;
        else 
            a_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv8_0;
    b_0_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    b_0_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    b_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            b_0_ce0 <= ap_const_logic_1;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_0_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            b_0_ce1 <= ap_const_logic_1;
        else 
            b_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_1_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    b_1_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    b_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            b_1_ce0 <= ap_const_logic_1;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            b_1_ce1 <= ap_const_logic_1;
        else 
            b_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_2_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    b_2_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    b_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            b_2_ce0 <= ap_const_logic_1;
        else 
            b_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            b_2_ce1 <= ap_const_logic_1;
        else 
            b_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_3_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    b_3_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    b_3_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            b_3_ce0 <= ap_const_logic_1;
        else 
            b_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_3_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            b_3_ce1 <= ap_const_logic_1;
        else 
            b_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    c_0_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    c_0_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    c_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_0_ce0 <= ap_const_logic_1;
        else 
            c_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_0_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_0_ce1 <= ap_const_logic_1;
        else 
            c_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    c_0_d0 <= std_logic_vector(unsigned(a_0_q0) + unsigned(b_0_q0));
    c_0_d1 <= std_logic_vector(unsigned(a_0_q1) + unsigned(b_0_q1));

    c_0_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_0_we0 <= ap_const_logic_1;
        else 
            c_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_0_we1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_0_we1 <= ap_const_logic_1;
        else 
            c_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    c_1_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    c_1_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_1_ce0 <= ap_const_logic_1;
        else 
            c_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_1_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_1_ce1 <= ap_const_logic_1;
        else 
            c_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_d0 <= std_logic_vector(unsigned(a_1_q0) + unsigned(b_1_q0));
    c_1_d1 <= std_logic_vector(unsigned(a_1_q1) + unsigned(b_1_q1));

    c_1_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_1_we0 <= ap_const_logic_1;
        else 
            c_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_1_we1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_1_we1 <= ap_const_logic_1;
        else 
            c_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    c_2_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    c_2_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    c_2_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_2_ce0 <= ap_const_logic_1;
        else 
            c_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_2_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_2_ce1 <= ap_const_logic_1;
        else 
            c_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    c_2_d0 <= std_logic_vector(unsigned(a_2_q0) + unsigned(b_2_q0));
    c_2_d1 <= std_logic_vector(unsigned(a_2_q1) + unsigned(b_2_q1));

    c_2_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_2_we0 <= ap_const_logic_1;
        else 
            c_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_2_we1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_2_we1 <= ap_const_logic_1;
        else 
            c_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    c_3_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    c_3_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    c_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_3_ce0 <= ap_const_logic_1;
        else 
            c_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    c_3_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_3_ce1 <= ap_const_logic_1;
        else 
            c_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    c_3_d0 <= std_logic_vector(unsigned(a_3_q0) + unsigned(b_3_q0));
    c_3_d1 <= std_logic_vector(unsigned(a_3_q1) + unsigned(b_3_q1));

    c_3_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_3_we0 <= ap_const_logic_1;
        else 
            c_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    c_3_we1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_3_we1 <= ap_const_logic_1;
        else 
            c_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;








