-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity simple is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_0_ap_vld : OUT STD_LOGIC;
    c_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_1_ap_vld : OUT STD_LOGIC;
    c_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_2_ap_vld : OUT STD_LOGIC;
    c_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_3_ap_vld : OUT STD_LOGIC;
    c_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_4_ap_vld : OUT STD_LOGIC;
    c_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_5_ap_vld : OUT STD_LOGIC;
    c_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_6_ap_vld : OUT STD_LOGIC;
    c_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_7_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of simple is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "simple,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku035-ffva1156-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.714000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=1820,HLS_SYN_LUT=1771}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component simple_fadd_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    simple_fadd_32ns_bkb_U1 : component simple_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_0,
        din1 => b_0,
        ce => ap_const_logic_1,
        dout => grp_fu_212_p2);

    simple_fadd_32ns_bkb_U2 : component simple_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_1,
        din1 => b_1,
        ce => ap_const_logic_1,
        dout => grp_fu_219_p2);

    simple_fadd_32ns_bkb_U3 : component simple_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_2,
        din1 => b_2,
        ce => ap_const_logic_1,
        dout => grp_fu_226_p2);

    simple_fadd_32ns_bkb_U4 : component simple_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_3,
        din1 => b_3,
        ce => ap_const_logic_1,
        dout => grp_fu_233_p2);

    simple_fadd_32ns_bkb_U5 : component simple_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_4,
        din1 => b_4,
        ce => ap_const_logic_1,
        dout => grp_fu_240_p2);

    simple_fadd_32ns_bkb_U6 : component simple_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_5,
        din1 => b_5,
        ce => ap_const_logic_1,
        dout => grp_fu_247_p2);

    simple_fadd_32ns_bkb_U7 : component simple_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_6,
        din1 => b_6,
        ce => ap_const_logic_1,
        dout => grp_fu_254_p2);

    simple_fadd_32ns_bkb_U8 : component simple_fadd_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_7,
        din1 => b_7,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;
    c_0 <= grp_fu_212_p2;

    c_0_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_0_ap_vld <= ap_const_logic_1;
        else 
            c_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    c_1 <= grp_fu_219_p2;

    c_1_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_1_ap_vld <= ap_const_logic_1;
        else 
            c_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    c_2 <= grp_fu_226_p2;

    c_2_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_2_ap_vld <= ap_const_logic_1;
        else 
            c_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    c_3 <= grp_fu_233_p2;

    c_3_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_3_ap_vld <= ap_const_logic_1;
        else 
            c_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    c_4 <= grp_fu_240_p2;

    c_4_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_4_ap_vld <= ap_const_logic_1;
        else 
            c_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    c_5 <= grp_fu_247_p2;

    c_5_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_5_ap_vld <= ap_const_logic_1;
        else 
            c_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    c_6 <= grp_fu_254_p2;

    c_6_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_6_ap_vld <= ap_const_logic_1;
        else 
            c_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    c_7 <= grp_fu_261_p2;

    c_7_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            c_7_ap_vld <= ap_const_logic_1;
        else 
            c_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
